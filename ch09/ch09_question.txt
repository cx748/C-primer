9.7: 为了索引int的vector中的元素，应该使用什么类型
    vector<int>::size_type

9.8: 为了读取string的list中的元素，应该使用什么类型？如果写入list，又该
使用什么类型？
    读取: list<string>::iterator或list<string>::const_iterator
    写入: list<string>::iterator

9.9: 函数begin与cbegin有什么区别
    cbegin返回一个const_iterator，指向容器的第一个元素。
    begin返回的是一个一般迭代器，可以通过该迭代器进行读写操作。
    cbegin显然不能进行写操作，只可以读。

9.10: 下面4个对象分别是什么类型
vector<int> v1;
const vector<int> v2;
auto it1 = v1.begin(), it2 = v2.begin();
auto it3 = v1.cbegin(), it4 = v2.cbegin();

it1：是vector<int>::iterator
it2,it3,it4: 是vector<int>::const_iterator

9.11: 对6种创建和初始化vector对象的方法。每一种给出一个实例
vector<int> vec;
vector<int> vec(10);
vector<int> vec(10,1);
vector<int> vec{1,2,3,4,5};
vector<int> vec(other_vec);
vector<int> vec(other_vec.begin(),other_vec.end());

9.12: 对于接受一个容器创建其拷贝的构造函数，和接受两个迭代器创建
拷贝的构造函数，解释他们的不同。

对于接受一个容器创建其拷贝的构造函数，两个容器的容器类型和数据类型
都必须相同，新容器会拷贝旧容器的所有元素。

接受两个迭代器创建的拷贝构造函数：不要求容器类型相同，而且，新容器
和原容器中的元素类型也可以不同，只要能将要拷贝的元素转换为要初始化
的容器元素类型就可以。

9.17 假设c1和c2是两个容器，下面的比较操作有何限制
                if(c1 < c2)

    c1和c2必须是相同的容器类型和数据类型，并且得支持关系操作符
